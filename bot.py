import telebot
import random
import time
import texts
from telebot import types
from telebot.apihelper import ApiTelegramException
from extensions import QuizException, TelegramException
from config import TOKEN, animals, mapping, questions, pics, admin_id

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_quiz(message):
    chat_id = message.chat.id # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {'answers': [], 'current_question': 0} # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ —Ç–µ–∫—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    bot.send_message(chat_id, texts.hello, parse_mode='Markdown') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    send_question(chat_id) # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def show_help(message):
    chat_id = message.chat.id
    text = texts.for_help()
    bot.send_message(chat_id, text, parse_mode='Markdown')

# –§-—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def restart_quiz(call):
    chat_id = call.message.chat.id
    user_states[chat_id] = {'answers': [], 'current_question': 0}
    bot.send_message(chat_id, texts.restart, parse_mode='Markdown')
    send_question(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /custody
@bot.message_handler(commands=['custody'])
def custody_info(call, totem_animal = '–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç'): # –§-—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞
    # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    try:
        chat_id = call.message.chat.id
    except AttributeError:
        chat_id = call.chat.id

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', url='https://moscowzoo.ru/about/guardianship'))
    markup.add(types.InlineKeyboardButton('üí¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫', callback_data=f'worker_{totem_animal}'))

    bot.send_message(chat_id, texts.custody, parse_mode='Markdown')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    bot.send_photo(chat_id, open('pics/custody.png', 'rb'),reply_markup=markup)

# –§-—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è
def info_for_worker(message, totem_animal):
    chat_id = message.chat.id
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    try:
        bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {totem_animal}\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüìã{message.text}')
    except ApiTelegramException as e:
        # –ü—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —á–∞—Ç–µ
        if e.description == "Bad Request: chat not found":
            bot.send_message(chat_id, texts.for_error)
            raise TelegramException(texts.no_admin_chat)
        # –ü—Ä–∏ –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
        else:
            bot.send_message(chat_id, texts.for_error)
            raise TelegramException(f'–û—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: {e}')
    else:
        bot.send_message(chat_id,f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ó–æ–æ–ø–∞—Ä–∫–∞.\n\n–¢–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüìã{message.text}\n\n‚è∞–û–∂–∏–¥–∞–π.')

@bot.message_handler(commands=['communicate'])
def chat_with_worker(call, totem_animal = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'): # –§-—è –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
    try:
        username = call.message.chat.username
        chat_id = call.message.chat.id
    except AttributeError:
        username = call.chat.username
        chat_id = call.chat.id
    else: pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if totem_animal in animals.keys():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username –≤ TG
        if username is not None:
            bot.send_message(admin_id,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {totem_animal}')
            bot.send_message(chat_id, f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ó–æ–æ–ø–∞—Ä–∫–∞.\n\n‚è∞–û–∂–∏–¥–∞–π.')
        else:
            msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π.')
            bot.register_next_step_handler(msg, info_for_worker, totem_animal)
    else:
        msg = bot.send_message(chat_id,f'–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π.')
        bot.register_next_step_handler(msg, info_for_worker, totem_animal)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('worker'))
def handle_callback_query(call):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–Ω–æ–ø–∫–∏
    totem_animal = call.data.split('_')[1]
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    chat_with_worker(call, totem_animal)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
def send_question(chat_id):
    user_state = user_states[chat_id]
    question_index = user_state['current_question']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    if question_index < len(questions):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
        question_data = questions[question_index]
        markup = types.InlineKeyboardMarkup()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
        for idx, option in enumerate(question_data['options']):
            callback_data = f"q_{question_index}_a_{idx}"
            button = types.InlineKeyboardButton(option, callback_data=callback_data)
            markup.add(button)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        bot.send_message(chat_id, question_data['question'], reply_markup=markup, parse_mode='Markdown')
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
        determine_totem_animal(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('q_'))
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split('_')
    question_index = int(data[1])
    answer_index = int(data[3])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if chat_id in user_states:
        user_state = user_states[chat_id]
        if user_state['current_question'] == question_index:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            question_data = questions[question_index]
            answer = question_data['options'][answer_index]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state['answers'].append(answer)
            user_state['current_question'] += 1
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
            send_question(chat_id)
        else:
            bot.answer_callback_query(call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!")
    else:
        bot.send_message(chat_id, "–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")

# –§-—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
def send_feedback(message):
    chat_id = message.chat.id
    username = message.chat.username
    try:
        if username is not None:
            bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ—Å—Ç–∞–≤–∏–ª –û–°:\n\n‚≠êÔ∏è –û—Ç–∑—ã–≤:\n{message.text}')
        else:
            bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –û–°:\n\n‚≠êÔ∏è –û—Ç–∑—ã–≤:\n{message.text}')
    except ApiTelegramException as e:
        if e.description == "Bad Request: chat not found":
            bot.send_message(chat_id, texts.for_error)
            raise TelegramException(texts.no_admin_chat)
        else:
            bot.send_message(chat_id, texts.for_error)
            raise TelegramException(f'–û—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: {e}')
    else:
        bot.send_message(chat_id,f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–ª—è —Ç–µ–±—è! üíñ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –û–°
@bot.message_handler(commands=['feedback'])
def feedback(call):
    try:
        chat_id = call.message.chat.id
    except AttributeError:
        chat_id = call.chat.id

    msg = bot.send_message(chat_id,f'‚≠êÔ∏è –û—Å—Ç–∞–≤—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –Ω–∞—à–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ, –Ω–∞–ø–∏—Å–∞–≤ –æ—Ü–µ–Ω–∫—É –∏ —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:')
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.register_next_step_handler(msg, send_feedback)


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
def determine_totem_animal(chat_id):
    user_state = user_states[chat_id]
    user_characteristics = []
    for i, answer in enumerate(user_state['answers']):
        characteristic = map_answer_to_characteristic(i, answer, chat_id)
        if characteristic:
            user_characteristics.append(characteristic)
        else:
            bot.send_message(chat_id, texts.quiz_error, parse_mode='Markdown')
            del user_states[chat_id]
            raise QuizException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã')

    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    scores = {}
    for animal, characteristics in animals.items():
        score = sum(1 for char in user_characteristics if char in characteristics)
        scores[animal] = score

    max_score = max(scores.values())
    top_animals = [animal for animal, score in scores.items() if score == max_score]

    # –í—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –µ—Å–ª–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—Ç
    totem_animal = random.choice(top_animals)
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    photo_path = f'pics/{pics[totem_animal]}.jpg'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('Instagram', url='https://instagram.com'))
    markup.add(types.InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url='https://vk.com'))
    markup.add(types.InlineKeyboardButton('–ù–∞—à Telegram!', url='https://t.me/Moscowzoo_official'))
    markup.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='continue_restart'))
    markup.add(types.InlineKeyboardButton('‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='continue_feedback'))
    markup.add(types.InlineKeyboardButton('‚ùóÔ∏è–û–ø–µ–∫—É–Ω—Å—Ç–≤–æ‚ùóÔ∏è', callback_data=f'continue_custody|{totem_animal}'))

    bot.send_message(chat_id, texts.totem, parse_mode='Markdown')
    # 2-—Ö —Å–µ–∫—É–Ω–¥–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è "–∏–Ω—Ç—Ä–∏–≥–∏"
    time.sleep(2)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü. —Å–µ—Ç–∏
    bot.send_photo(chat_id, open(photo_path, 'rb'), caption=texts.totem_caption, reply_markup=markup, parse_mode='Markdown')
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[chat_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('continue'))
def handle_callback_query(call):
    if call.data == 'continue_restart':
        restart_quiz(call)
    elif call.data.startswith('continue_custody'):
        totem_animal = call.data.split('|')[1]
        custody_info(call, totem_animal = totem_animal)
    elif call.data == 'continue_feedback':
        feedback(call)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π
def map_answer_to_characteristic(question_index, answer, chat_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–∞—Ä-–∫–∞, –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫ –æ—Ç–≤–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        return mapping[question_index][answer]
    except KeyError:
        bot.send_message(chat_id, texts.for_error)
        raise QuizException(f"–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å {question_index}, –æ—Ç–≤–µ—Ç '{answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.infinity_polling(allowed_updates=['message', 'callback_query'], none_stop = True)