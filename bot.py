import telebot
from telebot import types
from config import TOKEN, animals, mapping, questions, pics, custody_text, admin_id, commands
import random
import time
from telebot.apihelper import ApiTelegramException
from extensions import QuizException, TelegramException

# –í–∞—à —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_quiz(message):
    chat_id = message.chat.id
    user_states[chat_id] = {'answers': [], 'current_question': 0}
    bot.send_message(chat_id, "üëã *–ü—Ä–∏–≤–µ—Ç!\n\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ! –†—Ä—Ä—Ä...*\n\n_–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ._\n\n–ü–æ–º–æ—â—å: /help", parse_mode='Markdown')
    send_question(chat_id)

@bot.message_handler(commands=['help'])
def show_help(message):
    chat_id = message.chat.id
    text = 'üö® *–°–ø–µ—à—É –Ω–∞ –ø–æ–º–æ—â—å!*\n\n‚úÖ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:'
    for command, description in commands.items():
        text += f'\n{command} - {description}'
    text += ('\n\n*üßê –ü–æ –ø–æ–≤–æ–¥—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:*'
             '\n–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø—É—Ç–µ–º –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É. –ü–æ—Å–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ñ–æ—Ç–æ —Å —Ç–æ—Ç–µ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –∏ –º–æ–∂–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö.'
             '\n\nüòª –¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ª–∏–±–æ –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.')
    bot.send_message(chat_id, text, parse_mode='Markdown')


def restart_quiz(call):
    chat_id = call.message.chat.id
    user_states[chat_id] = {'answers': [], 'current_question': 0}
    bot.send_message(chat_id, "üëã *–•–æ—Ä–æ—à–æ!\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.*\n\n_–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ._", parse_mode='Markdown')
    send_question(chat_id)

@bot.message_handler(commands=['custody'])
def custody_info(call, totem_animal = '–ù–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç'):
    try:
        chat_id = call.message.chat.id
    except AttributeError:
        chat_id = call.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', url='https://moscowzoo.ru/about/guardianship'))
    markup.add(types.InlineKeyboardButton('üí¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫', callback_data=f'worker_{totem_animal}'))
    bot.send_message(chat_id, custody_text, parse_mode='Markdown')
    bot.send_photo(chat_id, open('pics/custody.png', 'rb'),reply_markup=markup)

def info_for_worker(message, totem_animal):
    chat_id = message.chat.id
    try:
        bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {totem_animal}\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüìã{message.text}')
    except ApiTelegramException as e:
        if e.description == "Bad Request: chat not found":
            bot.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —Å–∫–æ—Ä–æ –≤—Å—ë –ø–æ–ø—Ä–∞–≤–∏–º. –û–±–µ—â–∞—é!')
            raise TelegramException(f"–û—à–∏–±–∫–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ó–æ–æ–ø–∞—Ä–∫–∞")
        else:
            bot.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —Å–∫–æ—Ä–æ –≤—Å—ë –ø–æ–ø—Ä–∞–≤–∏–º. –û–±–µ—â–∞—é!')
            raise TelegramException(f'–û—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: {e}')
    else:
        bot.send_message(chat_id,f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ó–æ–æ–ø–∞—Ä–∫–∞.\n\n–¢–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüìã{message.text}\n\n‚è∞–û–∂–∏–¥–∞–π.')


@bot.message_handler(commands=['communicate'])
def chat_with_worker(call, totem_animal = '–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª'):
    try:
        username = call.message.chat.username
        chat_id = call.message.chat.id
    except AttributeError:
        username = call.chat.username
        chat_id = call.chat.id
    else: pass

    if totem_animal in animals.keys():
        if username is not None:
            bot.send_message(admin_id,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {totem_animal}')
            bot.send_message(chat_id, f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ó–æ–æ–ø–∞—Ä–∫–∞.\n\n‚è∞–û–∂–∏–¥–∞–π.')
        else:
            msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π.')
            bot.register_next_step_handler(msg, info_for_worker, totem_animal)
    else:
        msg = bot.send_message(chat_id,f'–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∑–∞–ª—Å—è —Å —Ç–æ–±–æ–π.')
        bot.register_next_step_handler(msg, info_for_worker, totem_animal)

@bot.callback_query_handler(func=lambda call: call.data.startswith('worker'))
def handle_callback_query(call):
    totem_animal = call.data.split('_')[1]
    chat_with_worker(call, totem_animal)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
def send_question(chat_id):
    user_state = user_states[chat_id]
    question_index = user_state['current_question']

    if question_index < len(questions):
        question_data = questions[question_index]
        markup = types.InlineKeyboardMarkup()
        for idx, option in enumerate(question_data['options']):
            callback_data = f"q_{question_index}_a_{idx}"
            button = types.InlineKeyboardButton(option, callback_data=callback_data)
            markup.add(button)
        bot.send_message(chat_id, question_data['question'], reply_markup=markup, parse_mode='Markdown')
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
        determine_totem_animal(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
@bot.callback_query_handler(func=lambda call: call.data.startswith('q_'))
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split('_')
    question_index = int(data[1])
    answer_index = int(data[3])

    if chat_id in user_states:
        user_state = user_states[chat_id]
        if user_state['current_question'] == question_index:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            question_data = questions[question_index]
            answer = question_data['options'][answer_index]
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state['answers'].append(answer)
            user_state['current_question'] += 1
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
            send_question(chat_id)
        else:
            bot.answer_callback_query(call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!")
    else:
        bot.send_message(chat_id, "–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
def determine_totem_animal(chat_id):
    user_state = user_states[chat_id]
    user_characteristics = []
    for i, answer in enumerate(user_state['answers']):
        characteristic = map_answer_to_characteristic(i, answer, chat_id)
        if characteristic:
            user_characteristics.append(characteristic)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ :(\n–ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /start.", parse_mode='Markdown')
            del user_states[chat_id]
            raise QuizException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã')


    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    scores = {}
    for animal, characteristics in animals.items():
        score = sum(1 for char in user_characteristics if char in characteristics)
        scores[animal] = score

    max_score = max(scores.values())
    top_animals = [animal for animal, score in scores.items() if score == max_score]

    totem_animal = random.choice(top_animals)
    photo_path = f'pics/{pics[totem_animal]}.jpg'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('Instagram', url='https://instagram.com'))
    markup.add(types.InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url='https://vk.com'))
    markup.add(types.InlineKeyboardButton('–ù–∞—à Telegram!', url='https://t.me/Moscowzoo_official'))
    markup.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='continue_restart'))
    markup.add(types.InlineKeyboardButton('‚ùóÔ∏è–û–ø–µ–∫—É–Ω—Å—Ç–≤–æ‚ùóÔ∏è', callback_data=f'continue_custody|{totem_animal}'))

    bot.send_message(chat_id, f"–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ...\n–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å!", parse_mode='Markdown')
    time.sleep(2)
    bot.send_photo(chat_id, open(photo_path, 'rb'), caption='–û–ø—É–±–ª–∏–∫—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Å–µ–±–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö!\n–ò–ª–∏ –∑–∞—Ö–æ–¥–∏ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëç\n\n*–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º —Å–≤–æ–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ!*\n_–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É_',reply_markup=markup, parse_mode='Markdown')
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[chat_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('continue'))
def handle_callback_query(call):
    if call.data == 'continue_restart':
        restart_quiz(call)
    elif call.data.startswith('continue_custody'):
        totem_animal = call.data.split('|')[1]
        custody_info(call, totem_animal = totem_animal)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π
def map_answer_to_characteristic(question_index, answer, chat_id):
    try:
        return mapping[question_index][answer]
    except KeyError:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞... –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–¥–Ω–µ–µ, –º—ã –≤—Å–µ –ø–æ–ø—Ä–∞–≤–∏–º!")
        raise QuizException(f"–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å {question_index}, –æ—Ç–≤–µ—Ç '{answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling(allowed_updates=['message', 'callback_query'])